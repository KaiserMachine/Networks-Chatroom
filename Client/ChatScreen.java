/** * This program is a rudimentary demonstration of Swing GUI programming. * Note, the default layout manager for JFrames is the border layout. This * enables us to position containers using the coordinates South and Center. * * Usage: *	java ChatScreen * * When the user enters text in the textfield, it is displayed backwards  * in the display area. */import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.border.*;import java.io.*;import java.net.*;public class ChatScreen extends JFrame implements ActionListener, KeyListener{   private JButton sendButton;   private JButton exitButton;   private JTextField sendText;   private JTextArea displayArea;   private BufferedWriter toServer;   private Socket server;   private String user;   public ChatScreen(Socket server, String user) throws IOException {   	/**   	 * a panel used for placing components   	 */      JPanel p = new JPanel();            this.server = server;      this.user = user;      try{          toServer = new BufferedWriter(new OutputStreamWriter(server.getOutputStream()));          toServer.write("JOIN " + user + "\r\n");          toServer.flush();      }      catch (IOException ioe) { System.out.println(ioe);}      Border etched = BorderFactory.createEtchedBorder();      Border titled = BorderFactory.createTitledBorder(etched, "Enter Message Here ...");      p.setBorder(titled);      	/**   	 * set up all the components   	 */      sendText = new JTextField(30);      sendButton = new JButton("Send");      exitButton = new JButton("Exit");      	/**   	 * register the listeners for the different button clicks   	 */      sendText.addKeyListener(this);      sendButton.addActionListener(this);      exitButton.addActionListener(this);      	/**   	 * add the components to the panel   	 */      p.add(sendText);      p.add(sendButton);      p.add(exitButton);      	/**   	 * add the panel to the "south" end of the container   	 */      getContentPane().add(p,"South");      	/**   	 * add the text area for displaying output. Associate   	 * a scrollbar with this text area. Note we add the scrollpane   	 * to the container, not the text area   	 */      displayArea = new JTextArea(15,40);      displayArea.setEditable(false);      displayArea.setFont(new Font("SansSerif", Font.PLAIN, 14));         JScrollPane scrollPane = new JScrollPane(displayArea);      getContentPane().add(scrollPane,"Center");      	/**   	 * set the title and size of the frame   	 */      setTitle("Chatroom");      pack();         setVisible(true);      sendText.requestFocus();      	/** anonymous inner class to handle window closing events */      addWindowListener(         new WindowAdapter() {            public void windowClosing(WindowEvent evt) {                try{                    toServer.write("LEAVE " + user + "\r\n");                    toServer.flush();                    toServer.close();                    System.exit(0);                }                catch (IOException ioe) { System.out.println(ioe);}            }         } );      }	/**	 * Displays a message	 */   public void displayMessage(String message) {      displayArea.append(message + "\n");   }	/**	 * This gets the text the user entered and outputs it	 * in the display area.	 */   public void displayText() {      String message = sendText.getText().trim();      try{          toServer.write("SEND " + this.user + " " + message + "\r\n");          // System.out.println("SEND " + this.user + " " + message + "\r\n");          toServer.flush();      }      catch (IOException ioe) { System.out.println(ioe); }      sendText.setText("");      sendText.requestFocus();   }	/**	 * This method responds to action events .... i.e. button clicks	 * and fulfills the contract of the ActionListener interface.	 */   public void actionPerformed(ActionEvent evt) {      Object source = evt.getSource();         if (source == sendButton)          displayText();      else if (source == exitButton) {   // Write protocol for exiting from server          try{              toServer.write("LEAVE " + user + "\r\n");              toServer.flush();              toServer.close();              System.exit(0);          }          catch (IOException ioe) { System.out.println(ioe);}      }   }	/**	 * These methods responds to keystroke events and fulfills	 * the contract of the KeyListener interface.	 */	/**	 * This is invoked when the user presses	 * the ENTER key.	 */   public void keyPressed(KeyEvent e) {       if (e.getKeyCode() == KeyEvent.VK_ENTER)         displayText();   }	/** Not implemented */   public void keyReleased(KeyEvent e) { }	/** Not implemented */   public void keyTyped(KeyEvent e) {  }   public static void main(String[] args) {      try {          // Reject username if length greater than 20          if (args[1].length() > 20)          {              System.out.println("User name length must be less than 20!");              return;          }          // Reject username is not alphabetical          if (!args[1].matches("[a-zA-Z]+"))          {              System.out.println("User name must only be alphabetical!");              return;          }         Socket server = new Socket(args[0], 5555);         ChatScreen win = new ChatScreen(server, args[1]);         // win.displayMessage("My name is " + args[1]);               Thread ReaderThread = new Thread(new ReaderThread(server, win));               ReaderThread.start();      }      catch (IOException ioe) { System.out.println(ioe); }         }}